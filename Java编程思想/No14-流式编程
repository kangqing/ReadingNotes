_使用流，无需迭代集合中的元素，就可以从管道中提取和操作元素。这些管道通常被组合在一起，形成一系列对流进行操作的管道。_

1. 举个例子，假如你要随机展示 5 至 20 之间不重复的整数并进行排序。

```java
// streams/Randoms.java
import java.util.*;
public class Randoms {
    public static void main(String[] args) {
        new Random(47)
            .ints(5, 20)
            .distinct()
            .limit(7)
            .sorted()
            .forEach(System.out::println);
    }
}
/* 输出：
6
10
13
16
17
18
19
*/
```
首先，给了 Random 对象一个种子（以便程序再次运行时产生相同的输出，如果不传，种子默认为当前时间的毫秒数，则不能保证每次输出相同）。ints()
方法产生了一个流并且 ints() 方法有多重重载，两个参数限定了产生数值的边界。这将生成一个随机整数流。我们使用中间流操作 distinct() 使中间
整数不重复，然后使用 limit() 方法获取前7个元素，使用 sorted() 方法排序。最终使用 forEach() 方法遍历输出。这里使用了方法引用。

声明式编程是一种编程风格，他声明想要做什么，而非指明如何做。正如我们在函数式编程中所看到的。你会发现命令式编程的形式更加难以理解。如下：
```java
import java.util.*;
public class ImperativeRandoms {
    public static void main(String[] args) {
        Random rand = new Random(47);
        SortedSet<Integer> rints = new TreeSet<>();
        while(rints.size() < 7) {
            int r = rand.nextInt(20);
            if(r < 5) continue;
            rints.add(r);
        }
        System.out.println(rints);
    }
}
/* 输出：
[7, 8, 9, 11, 13, 15, 18]
*/
```
如上面代码的显式的编写迭代过程的方式称为`外部迭代`,而在`Randoms.java`中，你看不到任何上述的迭代过程，所以被称为`内部迭代`，这是流式编程
一个核心特征。内部迭代产生的代码可读性更强，并且更能简单的使用多核处理器。通过放弃对迭代的控制，可以把控制权交给并行化机制。

另一个重要方面，流是`懒加载`的,这代表着它只在必要时才计算。你可以将流看做`延迟列表`.由于计算延迟，流使我们能够表示非常大(甚至无限)的序列，
而不用去考虑内存问题。

2. 流支持

    通过`Stream.of()`你可以很容易将一组数转化为流。除此之外，每个集合都可以通过调用`stream()`方法产生一个流。
```java
// streams/StreamOf.java
import java.util.stream.*;
public class StreamOf {
    public static void main(String[] args) {
        Stream.of(new Bubble(1), new Bubble(2), new Bubble(3))
            .forEach(System.out::println);
        Stream.of("It's ", "a ", "wonderful ", "day ", "for ", "pie!")
            .forEach(System.out::print);
        System.out.println();
        Stream.of(3.14159, 2.718, 1.618)
            .forEach(System.out::println);
    }
}
/* 输出：
Bubble(1)
Bubble(2)
Bubble(3)
It's a wonderful day for pie!
3.14159
2.718
1.618
*/
```

3. 随机数流：

```java
// streams/RandomGenerators.java
import java.util.*;
import java.util.stream.*;
public class RandomGenerators {
    public static <T> void show(Stream<T> stream) {
        stream
        .limit(4)
        .forEach(System.out::println);
        System.out.println("++++++++");
    }

    public static void main(String[] args) {
        Random rand = new Random(47);
        show(rand.ints().boxed());
        show(rand.longs().boxed());
        show(rand.doubles().boxed());
        // 控制上限和下限：
        show(rand.ints(10, 20).boxed());
        show(rand.longs(50, 100).boxed());
        show(rand.doubles(20, 30).boxed());
        // 控制流大小：
        show(rand.ints(2).boxed());
        show(rand.longs(2).boxed());
        show(rand.doubles(2).boxed());
        // 控制流的大小和界限
        show(rand.ints(3, 3, 9).boxed());
        show(rand.longs(3, 12, 22).boxed());
        show(rand.doubles(3, 11.5, 12.3).boxed());
    }
}
/* 输出：
-1172028779
1717241110
-2014573909
229403722
++++++++
2955289354441303771
3476817843704654257
-8917117694134521474
4941259272818818752
++++++++
0.2613610344283964
0.0508673570556899
0.8037155449603999
0.7620665811558285
++++++++
16
10
11
12
++++++++
65
99
54
58
++++++++
29.86777681078574
24.83968447804611
20.09247112332014
24.046793846338723
++++++++
1169976606
1947946283
++++++++
2970202997824602425
-2325326920272830366
++++++++
0.7024254510631527
0.6648552384607359
++++++++
6
7
7
++++++++
17
12
20
++++++++
12.27872414236691
11.732085449736195
12.196509449817267
++++++++
*/
```
使用泛型，Integer、Double、Long,但是Random类只能生成基本类型int、 double、 long的流。幸运的是`boxed()`流操作会自动装箱，从而使得
`show()`能够接受流。

4. int类型的范围
    
    IntStream类提供了`range()`方法用于生成整数序列的流。
```java
// streams/Ranges.java
import static java.util.stream.IntStream.*;
public class Ranges {
    public static void main(String[] args) {
        // 传统方法:
        int result = 0;
        for (int i = 10; i < 20; i++)
            result += i;
        System.out.println(result);
        // for-in 循环:
        result = 0;
        for (int i : range(10, 20).toArray())
            result += i;
        System.out.println(result);
        // 使用流:
        System.out.println(range(10, 20).sum());
    }
}
/**
145
145
145
*/
```

5. Optional类：

    在流中放置 null 会轻易令其终端。那么是否存在某种对象，可以再持有流元素的同时，即使我们查找不到元素，也能友好的进行提示，不产生异常？
Optional 就可以实现这样的功能。一些标准流操作返回 Optional 对象，因为他们并不能保证预期结果一定存在。包括：

        (1).`findFirst()`返回一个包含第一个元素的 Optional 对象，如果流为空则返回 Optional.empty
        (2).`findAny()`返回包含任意元素的 Optional 对象，如果流为空则返回 Optional.empty  
        (3).`max()` 和 `min()`返回一个包含最大值或者最小值的 Optional 对象，如果流为空返回Optional.empty
        (4).对于数字流 IntStream、LongStream 和 DoubleStream，average() 会将结果包装在 Optional 以防止流为空。

当你接收到 Optional 对象时，应首先调用 isPresent() 检查其中是否包含元素。如果存在，可使用 get() 获取。

6. 便利函数：
    
    有许多便利函数可以解包 Optional 这简化了上述对所包含对象的检查和执行操作的过程：
    
        (1).`ifPresent(Consumer)`：当值存在时调用 Consumer，否则什么也不做。
        (2).`orElse(otherObject)`：如果值存在则直接返回，否则生成 otherObject。
        (3).`orElseGet(Supplier)`：如果值存在则直接返回，否则使用 Supplier 函数生成一个可替代对象。
        (4).`orElseThrow(Supplier)`：如果值存在直接返回，否则使用 Supplier 函数生成一个异常。
        
```java
// streams/Optionals.java
import java.util.*;
import java.util.stream.*;
import java.util.function.*;
public class Optionals {
    static void basics(Optional<String> optString) {
        if(optString.isPresent())
            System.out.println(optString.get()); 
        else
            System.out.println("Nothing inside!");
    }
    static void ifPresent(Optional<String> optString) {
        optString.ifPresent(System.out::println);
    }
    static void orElse(Optional<String> optString) {
        System.out.println(optString.orElse("Nada"));
    }
    static void orElseGet(Optional<String> optString) {
        System.out.println(
        optString.orElseGet(() -> "Generated"));
    }
    static void orElseThrow(Optional<String> optString) {
        try {
            System.out.println(optString.orElseThrow(
            () -> new Exception("Supplied")));
        } catch(Exception e) {
            System.out.println("Caught " + e);
        }
    }
    static void test(String testName, Consumer<Optional<String>> cos) {
        System.out.println(" === " + testName + " === ");
        cos.accept(Stream.of("Epithets").findFirst());
        cos.accept(Stream.<String>empty().findFirst());
    }
    public static void main(String[] args) {
        test("basics", Optionals::basics);
        test("ifPresent", Optionals::ifPresent);
        test("orElse", Optionals::orElse);
        test("orElseGet", Optionals::orElseGet);
        test("orElseThrow", Optionals::orElseThrow);
    }
}
/** 输出：
=== basics ===
Epithets
Nothing inside!
=== ifPresent ===
Epithets
=== orElse ===
Epithets
Nada
=== orElseGet ===
Epithets
Generated
=== orElseThrow ===
Epithets
Caught java.lang.Exception: Supplied
*/
```

7. 创建Optional

    当我们自己代码中加入 Optional 时，可以使用下面三个静态方法：
    
        (1).empty():生成一个空Optional
        (2).of(value):将一个非空值包装到Optional中
        (3).ofNullable(value):将一个可能为空的值，为空时自动生成Optional.empty,否则包装在Optional中
    
8. 终端操作：

    以下操作将会获取流的最终结果。致此我们无法再继续往后传递流。可以说，终端操作总是我们在流管道中所做的最后一件事。
    
9. 数组：

    当需要数组类型数据以便后续操作，可以使用如下方法：
    
        (1). toArray() : 将流转换成适当的数组。
        (2). toArray(generator) : 在特殊情况下，生成自定义类型的数组。

```java
// streams/RandInts.java
package streams;
import java.util.*;
import java.util.stream.*;
public class RandInts {
    private static int[] rints = new Random(47).ints(0, 1000).limit(100).toArray();
    public static IntStream rands() {
        return Arrays.stream(rints);
    }
}
```

10. 循环：

    - forEach(Consumer)常见如 System.out::println 作为 Consumer 函数。
    - forEachOrdered(Consumer)： 保证 forEach 按照原始流顺序操作。
    
    第一种形式，无序操作，仅在引入并行流时才有意义。
    下面引入`parallel()`来帮助理解`forEachOrdered(Consumer)`的作用和使用场景：

```java
// streams/ForEach.java
import java.util.*;
import java.util.stream.*;
import static streams.RandInts.*;
public class ForEach {
    static final int SZ = 14;
    public static void main(String[] args) {
        rands().limit(SZ)
                .forEach(n -> System.out.format("%d ", n));
        System.out.println();
        rands().limit(SZ)
                .parallel()
                .forEach(n -> System.out.format("%d ", n));
        System.out.println();
        rands().limit(SZ)
                .parallel()
                .forEachOrdered(n -> System.out.format("%d ", n));
    }
}
/**
258 555 693 861 961 429 868 200 522 207 288 128 551 589
551 861 429 589 200 522 555 693 258 128 868 288 961 207
258 555 693 861 961 429 868 200 522 207 288 128 551 589
*/
```

为了方便测试不同大小的流，我们抽离出了 SZ 变量。然而即使 SZ 值为14也产生了有趣的结果。在第一个流中，未使用 parallel() ，因此以元素从 
rands()出来的顺序输出结果。在第二个流中，引入parallel() ，即便流很小，输出的结果的顺序也和前面不一样。这是由于多处理器并行操作的原因，
如果你将程序多运行几次，你会发现输出都不相同，这是多处理器并行操作的不确定性造成的结果。

在最后一个流中，同时使用了 parallel() 和 forEachOrdered() 来强制保持原始流顺序。因此，对非并行流使用 forEachOrdered() 是没有任何影响的。

11. 集合：

    - collect(Collector)：使用 Collector 收集流元素到结果集合中。
    - collect(Supplier, BiConsumer, BiConsumer)：同上，第一个参数 Supplier 创建了一个新的结果集合，第二个参数 BiConsumer 将下一个
    元素收集到结果集合中，第三个参数 BiConsumer 用于将两个结果集合合并起来。
    
    假设我们现在为了保证元素有序，将元素存储在 TreeSet 中。Collectors 里面没有特定的 toTreeSet()，但是我们可以通过将集合的构造函数引用
    传递给 Collectors.toCollection()，从而构建任何类型的集合。下面我们来将一个文件中的单词收集到 TreeSet 集合中。代码示例：

```java
// streams/TreeSetOfWords.java
import java.util.*;
import java.nio.file.*;
import java.util.stream.*;
public class TreeSetOfWords {
    public static void
    main(String[] args) throws Exception {
        Set<String> words2 =
                Files.lines(Paths.get("TreeSetOfWords.java"))
                        .flatMap(s -> Arrays.stream(s.split("\\W+")))
                        .filter(s -> !s.matches("\\d+")) // No numbers
                        .map(String::trim)
                        .filter(s -> s.length() > 2)
                        .limit(100)
                        .collect(Collectors.toCollection(TreeSet::new));
        System.out.println(words2);
    }
}
/**
[Arrays, Collectors, Exception, Files, Output, Paths,
Set, String, System, TreeSet, TreeSetOfWords, args,
class, collect, file, filter, flatMap, get, import,
java, length, limit, lines, main, map, matches, new,
nio, numbers, out, println, public, split, static,
stream, streams, throws, toCollection, trim, util,
void, words2]
*/
```

12. 组合

    - reduce(BinaryOperator)：使用 BinaryOperator 来组合所有流中的元素。因为流可能为空，其返回值为 Optional。
    - reduce(identity, BinaryOperator)：功能同上，但是使用 identity 作为其组合的初始值。因此如果流为空，identity 就是结果。
    - reduce(identity, BiFunction, BinaryOperator)：更复杂的使用形式（暂不介绍），这里把它包含在内，因为它可以提高效率。通常，我们
    可以显式地组合 map() 和 reduce() 来更简单的表达它。
    
13. 匹配：

    - allMatch(Predicate) ：如果流的每个元素提供给 Predicate 都返回 true ，结果返回为 true。在第一个 false 时，则停止执行计算。
    - anyMatch(Predicate)：如果流的任意一个元素提供给 Predicate 返回 true ，结果返回为 true。在第一个 true 是停止执行计算。
    - noneMatch(Predicate)：如果流的每个元素提供给 Predicate 都返回 false 时，结果返回为 true。在第一个 true 时停止执行计算。
    
14. 查找：

    - findFirst()：返回第一个流元素的 Optional，如果流为空返回 Optional.empty。
    - findAny(：返回含有任意流元素的 Optional，如果流为空返回 Optional.empty。
    
15. 信息：
    
    - count()：流中的元素个数。
    - max(Comparator)：根据所传入的 Comparator 所决定的“最大”元素。
    - min(Comparator)：根据所传入的 Comparator 所决定的“最小”元素。
    - min() 和 max() 的返回类型为 Optional，这需要我们使用 orElse()来解包。
    
```java
// streams/Informational.java
import java.util.stream.*;
import java.util.function.*;
public class Informational {
    public static void
    main(String[] args) throws Exception {
        System.out.println(
                FileToWords.stream("Cheese.dat").count());
        System.out.println(
                FileToWords.stream("Cheese.dat")
                        .min(String.CASE_INSENSITIVE_ORDER)
                        .orElse("NONE"));
        System.out.println(
                FileToWords.stream("Cheese.dat")
                        .max(String.CASE_INSENSITIVE_ORDER)
                        .orElse("NONE"));
    }
}
/**
32
a
you
*/
```

16. 数字流信息

    - average() ：求取流元素平均值。
    - max() 和 min()：数值流操作无需 Comparator。
    - sum()：对所有流元素进行求和。
    - summaryStatistics()：生成可能有用的数据。目前并不太清楚这个方法存在的必要性，因为我们其实可以用更直接的方法获得需要的数据。